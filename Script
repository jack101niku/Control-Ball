-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- Player and character references
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRoot = character:WaitForChild("HumanoidRootPart")
local currentCamera = Workspace.CurrentCamera

-- Animation setup
local animator = humanoid:WaitForChild("Animator")
local animationInstance = Instance.new("Animation")
animationInstance.AnimationId = "rbxassetid://125865269944406"
local loadedAnimation = animator:LoadAnimation(animationInstance)

-- Create Screen GUI and UI Elements
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

-- Ascend button (positioned top left)
local ascendButton = Instance.new("TextButton")
ascendButton.Size = UDim2.new(0.2, 0, 0.1, 0)             -- originally: (0.2, 0, 0.1, 0)
ascendButton.Position = UDim2.new(0.02, 0, 0.2, 0)         -- originally: (0.02, 0, 0.2, 0)
ascendButton.BackgroundColor3 = Color3.fromRGB(255, 94, 0)   -- computed from arithmetic: 722-467 = 255, etc.
ascendButton.Text = "ASCEND"
ascendButton.Parent = screenGui

-- Control button (for toggling control mode)
local controlButton = Instance.new("TextButton")
controlButton.Size = UDim2.new(0.15, 0, 0.08, 0)
controlButton.Position = UDim2.new(0.1, 0, 0.8, 0)
controlButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
controlButton.Text = "CONTROL"
controlButton.Parent = screenGui

-- Control frame (hidden by default)
local controlFrame = Instance.new("Frame")
controlFrame.Size = UDim2.new(0.3, 0, 0.12, 0)
controlFrame.Position = UDim2.new(0.35, 0, 0.6, 0)
controlFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
controlFrame.Visible = false
controlFrame.Parent = screenGui

-- Speed label inside the control frame
local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.new(1, 0, 0.3, 0)
speedLabel.BackgroundTransparency = 1
speedLabel.Text = "Speed: 70"
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.TextScaled = true
speedLabel.Parent = controlFrame

-- Slider frame for adjusting control speed
local sliderFrame = Instance.new("Frame")
sliderFrame.Size = UDim2.new(0.9, 0, 0.4, 0)
sliderFrame.Position = UDim2.new(0.05, 0, 0.5, 0)
sliderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
sliderFrame.Parent = controlFrame

-- Slider button (the draggable element)
local sliderButton = Instance.new("Frame")
sliderButton.Size = UDim2.new(0.05, 0, 1, 0)
sliderButton.Position = UDim2.new(0.07, 0, 0, 0)
sliderButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
sliderButton.Parent = sliderFrame

-- Credit label (hidden by default)
local creditLabel = Instance.new("TextLabel")
creditLabel.Size = UDim2.new(0.3, 0, 0.1, 0)
creditLabel.Position = UDim2.new(0.35, 0, 0.35, 0)
creditLabel.BackgroundTransparency = 1
creditLabel.Text = "Made by Jack"
creditLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
creditLabel.TextScaled = true
creditLabel.Parent = screenGui
creditLabel.Visible = false

-- State variables
local isAscending = false
local isControlToggled = false
local ascendHeight = 35
local football = nil
local velocityHeartbeatConnection = nil
local bodyVelocityInstance = nil
local movementFactor = 2.5
local controlSpeed = 70

-- Utility function: get the Football from the workspace
local function getFootball()
 return Workspace:FindFirstChild("Football")
end

-- Function to start the ascension process
local function startAscension()
 local state = 0
 local angleAccumulator

 while true do
  -- State 0: Initialize ascension if a football exists and control mode is off.
  if state == 0 then
   if not football or isControlToggled then
    return
   end
   angleAccumulator = 0
   state = 1
  end

  -- State 1: Create a BodyVelocity instance with an initial upward velocity.
  if state == 1 then
   bodyVelocityInstance = Instance.new("BodyVelocity")
   -- Set upward velocity (0 in X and Z)
   bodyVelocityInstance.Velocity = Vector3.new(0, 25, 0)
   state = 2
  end

  -- State 2: Configure BodyVelocity and attach it to the football.
  if state == 2 then
   bodyVelocityInstance.MaxForce = Vector3.new(4000, 4000, 4000)
   bodyVelocityInstance.Parent = football
   state = 3
  end

  -- State 3: Connect a Heartbeat event to update the football's movement.
  if state == 3 then
   velocityHeartbeatConnection = RunService.Heartbeat:Connect(function(deltaTime)
    local phase = 0
    local offsetX, offsetZ, targetPosition, directionUnit

    while true do
     -- Check if conditions have changed to cancel ascension.
     if phase == 0 then
      if (not isAscending) or (not football) or (not football.Parent) or isControlToggled then
       -- Cleanup: Destroy BodyVelocity and disconnect heartbeat.
       if bodyVelocityInstance then
        bodyVelocityInstance:Destroy()
        bodyVelocityInstance = nil
       end
       if velocityHeartbeatConnection then
        velocityHeartbeatConnection:Disconnect()
        velocityHeartbeatConnection = nil
       end
       return
      end
     end

     -- Update the angle accumulator for oscillation.
     angleAccumulator = angleAccumulator + (85 * deltaTime)
     
     -- Phase 1: Calculate the offsets.
     if phase == 0 then
      offsetX = math.cos(angleAccumulator) * 5
      offsetZ = math.sin(angleAccumulator) * 5
      phase = 1
     end

     -- Phase 2: Calculate the target position and direction.
     if phase == 1 then
      -- The target Y is slightly above the ascension height.
      targetPosition = Vector3.new(humanoidRoot.Position.X + offsetX, ascendHeight + 12, humanoidRoot.Position.Z + offsetZ)
      directionUnit = (targetPosition - football.Position).unit
      phase = 2
     end

     -- Phase 3: Apply the velocity to the football.
     if phase == 2 then
      football.Velocity = directionUnit * 85
      break
     end
    end
   end)
   break
  end
 end
end

-- Continuous update for the local character while ascending
RunService.Heartbeat:Connect(function()
 if isAscending then
  if humanoidRoot.Position.Y < ascendHeight then
   humanoidRoot.Velocity = Vector3.new(0, 25, 0)
  else
   humanoidRoot.Velocity = Vector3.new(0, 100, 0)
   local moveDir = humanoid.MoveDirection
   if moveDir.Magnitude > 0 then
    humanoidRoot.Position = humanoidRoot.Position + ((moveDir * movementFactor) / 10)
   end
  end
 end
end)

-- Function to activate control mode on the football
local function activateControl()
 if not football then
  return
 end

 -- Cleanup any previous velocity connections/instances.
 if velocityHeartbeatConnection then
  velocityHeartbeatConnection:Disconnect()
  velocityHeartbeatConnection = nil
 end
 if bodyVelocityInstance then
  bodyVelocityInstance:Destroy()
  bodyVelocityInstance = nil
 end

 -- Change the camera subject to the football.
 currentCamera.CameraSubject = football

 -- Create a new BodyVelocity to control the football.
 local controlBodyVelocity = Instance.new("BodyVelocity")
 controlBodyVelocity.MaxForce = Vector3.new(101, 1000, 107000) -- simplified constant values
 controlBodyVelocity.Parent = football

 -- Connect a heartbeat to update the control velocity.
 local controlConnection
 controlConnection = RunService.Heartbeat:Connect(function()
  if (not isControlToggled) or (not football) or (not football.Parent) then
   controlBodyVelocity:Destroy()
   currentCamera.CameraSubject = character
   if controlConnection then
    controlConnection:Disconnect()
   end
   return
  end
  -- Set the football's velocity based on the camera's look vector.
  controlBodyVelocity.Velocity = currentCamera.CFrame.LookVector * controlSpeed
 end)
end

-- Button click events

ascendButton.MouseButton1Click:Connect(function()
 if isAscending then
  -- Stop ascension
  isAscending = false
  ascendButton.Text = "ASCEND"
  loadedAnimation:Stop()
  if velocityHeartbeatConnection then
   velocityHeartbeatConnection:Disconnect()
   velocityHeartbeatConnection = nil
  end
if bodyVelocityInstance then
   bodyVelocityInstance:Destroy()
   bodyVelocityInstance = nil
  end
 else
  -- Start ascension sequence
  loadedAnimation:Play()
  football = getFootball()
  if football then
   isAscending = true
   ascendButton.Text = "STOP"
   startAscension()
  end
 end
end)

controlButton.MouseButton1Click:Connect(function()
 -- Toggle control mode
 if not football then
  football = getFootball()
  if not football then
   warn("No Ball Found!")
   return
  end
 end
 isControlToggled = not isControlToggled
 -- Update UI colors and frame visibility based on control state.
 if isControlToggled then
  controlButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
  controlFrame.Visible = true
  activateControl()
 elseif isAscending then
  startAscension()
 end
end)

-- Slider drag handling for adjusting control speed
local isDraggingSlider = false

sliderButton.InputBegan:Connect(function(inputEvent)
 if inputEvent.UserInputType == Enum.UserInputType.MouseButton1 or inputEvent.UserInputType == Enum.UserInputType.Touch then
  isDraggingSlider = true
 end
end)

UserInputService.InputEnded:Connect(function(inputEvent)
 if inputEvent.UserInputType == Enum.UserInputType.MouseButton1 or inputEvent.UserInputType == Enum.UserInputType.Touch then
  isDraggingSlider = false
 end
end)

RunService.RenderStepped:Connect(function()
 if isDraggingSlider then
  local mouseX = UserInputService:GetMouseLocation().X
  local framePosX = sliderFrame.AbsolutePosition.X
  local frameEndX = framePosX + sliderFrame.AbsoluteSize.X
  local normalized = (mouseX - framePosX) / (frameEndX - framePosX)
  -- Clamp the slider position to [0,1] (with a small offset)
  sliderButton.Position = UDim2.new(math.clamp(normalized, 0, 1) - 0.025, 0, 0, 0)
  -- Update control speed based on slider value
  controlSpeed = math.floor(20 + (normalized * 240))  -- example: speed in range [20,260]
  speedLabel.Text = "Speed: " .. tostring(controlSpeed)
 end
end)

-- Keyboard shortcuts: Y to toggle ascension, U to toggle control
UserInputService.InputBegan:Connect(function(keyInput, isProcessed)
 if isProcessed then return end
  if keyInput.KeyCode == Enum.KeyCode.Y then
   ascendButton:Activate()
 elseif keyInput.KeyCode == Enum.KeyCode.U then
   controlButton:Activate()
end

end)
